-- Unacode.lua 

local Unakoda = {
    version = "1.1",

}

function Unakoda:init(gpu)
    gpu.drawText = Unakoda.drawText
    gpu.drawRectangle = Unakoda.drawRectangle
    gpu.drawImage = Unakoda.drawImage
    gpu.drawLine = Unakoda.drawLine
end

function Unakoda:drawLine(x1, y1, x2, y2, color)
    color = color or {255, 255, 255}
    
    local dx = math.abs(x2 - x1)
    local dy = math.abs(y2 - y1)
    local sx = x1 < x2 and 1 or -1
    local sy = y1 < y2 and 1 or -1
    local err = dx - dy
    
    while true do
        if x1 >= 1 and x1 <= self.resolution.width and
           y1 >= 1 and y1 <= self.resolution.height then
            self.pixel_draw_count = self.pixel_draw_count + 1
            self:drawPixel(x1, y1, color)
        end

        if x1 == x2 and y1 == y2 then break end
        
        local e2 = 2 * err
        if e2 > -dy then
            err = err - dy
            x1 = x1 + sx
        end
        if e2 < dx then
            err = err + dx
            y1 = y1 + sy
        end
    end
end

function Unakoda:drawImage(x, y, data)
    for image_x = 1, #data, 1 do
        for image_y = 1, #data[image_x], 1 do
            self.pixel_draw_count = self.pixel_draw_count + 1
            self:drawPixel(x + image_x-1, y + image_y-1, data[image_x][image_y])
        end
    end
end

function Unakoda:drawRectangle(x, y, width, height, color)
    for dy = 0, height - 1 do
        for dx = 0, width - 1 do
            local px = math.floor(x + dx)
            local py = math.floor(y + dy)

            if px >= 1 and px <= self.resolution.width and
               py >= 1 and py <= self.resolution.height then
                self.pixel_draw_count = self.pixel_draw_count + 1
                self:drawPixel(px, py, color)
            end
        end
    end
end

function Unakoda:drawText(x, y, text, color, scale)
    color = color or {255, 255, 255}
    scale = scale or 1

    local font = {
        -- Цифры
        ['0'] = {0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E},
        ['1'] = {0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E},
        ['2'] = {0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F},
        ['3'] = {0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E},
        ['4'] = {0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02},
        ['5'] = {0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E},
        ['6'] = {0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E},
        ['7'] = {0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08},
        ['8'] = {0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E},
        ['9'] = {0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C},
        
        -- Заглавные буквы
        ['A'] = {0x04, 0x0A, 0x11, 0x11, 0x1F, 0x11, 0x11},
        ['B'] = {0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E},
        ['C'] = {0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E},
        ['D'] = {0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E},
        ['E'] = {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F},
        ['F'] = {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10},
        ['G'] = {0x0E, 0x11, 0x10, 0x17, 0x11, 0x11, 0x0F},
        ['H'] = {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11},
        ['I'] = {0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E},
        ['J'] = {0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C},
        ['K'] = {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11},
        ['L'] = {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F},
        ['M'] = {0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11},
        ['N'] = {0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11},
        ['O'] = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E},
        ['P'] = {0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10},
        ['Q'] = {0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D},
        ['R'] = {0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11},
        ['S'] = {0x0F, 0x10, 0x10, 0x0E, 0x01, 0x01, 0x1E},
        ['T'] = {0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
        ['U'] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E},
        ['V'] = {0x11, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x04},
        ['W'] = {0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11},
        ['X'] = {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11},
        ['Y'] = {0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04},
        ['Z'] = {0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F},
        
        -- Строчные буквы (немного уменьшенные)
        ['a'] = {0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F},
        ['b'] = {0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E},
        ['c'] = {0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E},
        ['d'] = {0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F},
        ['e'] = {0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E},
        ['f'] = {0x06, 0x09, 0x08, 0x1C, 0x08, 0x08, 0x08},
        ['g'] = {0x00, 0x0F, 0x11, 0x11, 0x0F, 0x01, 0x0E},
        ['h'] = {0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11},
        ['i'] = {0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E},
        ['j'] = {0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C},
        ['k'] = {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12},
        ['l'] = {0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E},
        ['m'] = {0x00, 0x00, 0x1A, 0x15, 0x15, 0x11, 0x11},
        ['n'] = {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11},
        ['o'] = {0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E},
        ['p'] = {0x00, 0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10},
        ['q'] = {0x00, 0x0D, 0x13, 0x11, 0x0F, 0x01, 0x01},
        ['r'] = {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10},
        ['s'] = {0x00, 0x00, 0x0F, 0x10, 0x0E, 0x01, 0x1E},
        ['t'] = {0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06},
        ['u'] = {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D},
        ['v'] = {0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04},
        ['w'] = {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A},
        ['x'] = {0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11},
        ['y'] = {0x00, 0x11, 0x11, 0x0F, 0x01, 0x11, 0x0E},
        ['z'] = {0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F},
        
        -- Символы
        [' '] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        ['.'] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04},
        [','] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04},
        [':'] = {0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00},
        ['!'] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04},
        ['?'] = {0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04},
        ['-'] = {0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00},
        ['_'] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F},
        ['+'] = {0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00},
        ['/'] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00},
        ['\\']= {0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00},
        ['('] = {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02},
        [')'] = {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08},
        ['['] = {0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E},
        [']'] = {0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E},
        ['{'] = {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06},
        ['}'] = {0x0C, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0C},
        ['<'] = {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02},
        ['>'] = {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08},
        ['='] = {0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00},
        ['@'] = {0x0E, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0E},
        ['#'] = {0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A},
        ['$'] = {0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04},
        ['%'] = {0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03},
        ['^'] = {0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00},
        ['&'] = {0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D},
        ['*'] = {0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00},
        ['"'] = {0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00},
        ['\'']= {0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
        ['~'] = {0x00, 0x00, 0x0A, 0x15, 0x00, 0x00, 0x00},
        ['`'] = {0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
        ['|'] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
        ['°'] = {0x0E, 0x0A, 0x0E, 0x00, 0x00, 0x00, 0x00},
    }

    local char_width = 5 * scale
    local char_spacing = 1 * scale
    local line_height = 8 * scale

    local lines = {}
    for line in text:gmatch("[^\n]+") do
        table.insert(lines, line)
    end
    
    for line_num, line in ipairs(lines) do
        local current_y = y + (line_num - 1) * line_height

        if current_y + 7*scale <= self.resolution.height then
            for i = 1, #line do
                local char = line:sub(i, i)
                local glyph = font[char] or font['?']
                local current_x = x + (i - 1) * (char_width + char_spacing)

                if current_x + char_width > 0 then
                    if current_x <= self.resolution.width then
                        for row = 1, 7 do
                            local row_data = glyph[row] or 0

                            for col = 0, 4 do
                                if bit.band(row_data, bit.lshift(1, 4 - col)) ~= 0 then
                                    for sy = 0, scale - 1 do
                                        for sx = 0, scale - 1 do
                                            local px = current_x + col * scale + sx
                                            local py = current_y + (row - 1) * scale + sy

                                            if px >= 1 and px <= self.resolution.width and
                                               py >= 1 and py <= self.resolution.height then
                                                self:drawPixel(px, py, color)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                else
                end

                if current_x + char_width > self.resolution.width then
                    break
                end
            end
        end
    end

    self.pixel_draw_count = self.pixel_draw_count + #text * 35 * scale * scale
end

return Unakoda