local json = require("json")

local filesApp = {
    name = "Files",
    version = "1.0",
    main = "main",
    iconText = "File",
    icon = json.decode
    system = true,
    scripts = {
        main = [[
local function displayFiles()
GPU:clear()

LDA({255, 255, 255})
LDX("File Explorer")
DTX(10, 10, X(), A(), 2)
DRE(MONITOR.resolution.width - 20, 10, 10, 10, {255, 0, 0})
DRE(MONITOR.resolution.width - 35, 10, 10, 10, {0, 100, 255})
local storage = HDD:getAllStorage()
if not storage or type(storage) ~= "table" or next(storage) == nil then
LDX("No files found")
DTX(MONITOR.resolution.width/2 - (#X() * 6), MONITOR.resolution.height/2, X(), {255, 255, 255}, 2)
return
end
local startX = 20
local startY = 50
local lineHeight = 20
local margin = 10
LDX("Files List:")
DTX(startX, startY, X(), {255, 255, 255}, 1)
APP.fileNames = {}
for name in pairs(storage) do
table.insert(APP.fileNames, name)
end
table.sort(APP.fileNames)
APP.fileScrollPos = APP.fileScrollPos or 0
APP.maxVisibleFiles = math.floor((MONITOR.resolution.height - startY - 50) / lineHeight)
APP.filePositions = {}
for i = 1, math.min(APP.maxVisibleFiles, #APP.fileNames - APP.fileScrollPos) do
local fileName = APP.fileNames[i + APP.fileScrollPos]
local yPos = startY + (i * lineHeight)
LDX(fileName)
DTX(startX + margin, yPos, X(), {200, 200, 200}, 1)
APP.filePositions[fileName] = {x = startX + margin, y = yPos, width = #fileName * 6, height = lineHeight}
end
if #APP.fileNames > APP.maxVisibleFiles then
local scrollText = string.format("%d/%d", math.min(APP.fileScrollPos + 1, #APP.fileNames), #APP.fileNames)
LDX(scrollText)
DTX(MONITOR.resolution.width - 50, MONITOR.resolution.height - 30, X(), {150, 150, 150}, 1)

LDX("up/down: Scroll")
DTX(10, MONITOR.resolution.height - 30, X(), {150, 150, 150}, 1)
end
end
local function displayFileContent(fileName, content)
GPU:clear()
LDA({255, 255, 255})
LDX("File Content: " .. fileName)
DTX(10, 10, X(), A(), 2)
DRE(MONITOR.resolution.width - 20, 10, 10, 10, {255, 0, 0})
DRE(MONITOR.resolution.width - 35, 10, 10, 10, {0, 100, 255})
local startX = 20
local startY = 30
local lineHeight = 20
local lines = {}
write(2, lines)
local max_chars_per_line = math.floor((MONITOR.resolution.width - 20) / 6)
for line in content:gmatch("[^\r\n]+") do
while #line > max_chars_per_line do
local chunk = line:sub(1, max_chars_per_line)
table.insert(lines, chunk)
line = line:sub(max_chars_per_line + 1)
end
if #line > 0 then
table.insert(lines, line)
end
end
APP.scrollPos = 0
APP.maxVisibleLines = math.floor((MONITOR.resolution.height - 80) / lineHeight)
for i = 1, math.min(APP.maxVisibleLines, #lines - APP.scrollPos) do
local yPos = startY + ((i-1) * lineHeight)
LDX(lines[i + APP.scrollPos])
DTX(startX, yPos, X(), {200, 200, 200}, 1)
end
LDX("up/down: Scroll  Esc: Exit  R: Refresh")
DTX(10, MONITOR.resolution.height - 50, X(), {150, 150, 150}, 1)
LDX("Back to Files")
DTX(10, MONITOR.resolution.height - 30, X(), {0, 255, 0}, 1)
APP.backButton = {x = 10, y = MONITOR.resolution.height - 30, width = #("Back to Files") * 6, height = 20}
write(2, lines)
end
local is_block_event = false
addEvent("keypressed", function(key)
if is_block_event then
return
end
if key == "escape" then
APP.close()
elseif key == "r" then
write(2, 0)
displayFiles()
elseif key == "up" or key == "down" then
if read(2) ~= 0 then
if key == "up" and APP.scrollPos > 0 then
APP.scrollPos = APP.scrollPos - 1
elseif key == "down" and APP.scrollPos < #read(2) - APP.maxVisibleLines then
APP.scrollPos = APP.scrollPos + 1
end
GPU:clear()
LDA({255, 255, 255})
LDX("File Content: " .. APP.currentFile)
DTX(10, 10, X(), A(), 2)
DRE(MONITOR.resolution.width - 20, 10, 10, 10, {255, 0, 0})
DRE(MONITOR.resolution.width - 35, 10, 10, 10, {0, 100, 255})
local startX = 20
local startY = 30
local lineHeight = 20
for i = 1, math.min(APP.maxVisibleLines, #read(2) - APP.scrollPos) do
local yPos = startY + ((i-1) * lineHeight)
LDX(read(2)[i + APP.scrollPos])
DTX(startX, yPos, X(), {200, 200, 200}, 1)
end
LDX("up/down: Scroll  Esc: Exit  R: Refresh")
DTX(10, MONITOR.resolution.height - 50, X(), {150, 150, 150}, 1)
LDX("Back to Files")
DTX(10, MONITOR.resolution.height - 30, X(), {0, 255, 0}, 1)
else
if key == "up" and APP.fileScrollPos > 0 then
APP.fileScrollPos = APP.fileScrollPos - 1
elseif key == "down" and APP.fileScrollPos < #APP.fileNames - APP.maxVisibleFiles then
APP.fileScrollPos = APP.fileScrollPos + 1
end
displayFiles()
end
end
end)
addEvent("mousereleased", function(x, y)
if is_block_event then
return
end
if APP.backButton and x >= APP.backButton.x and x <= APP.backButton.x + APP.backButton.width and
y >= APP.backButton.y and y <= APP.backButton.y + APP.backButton.height then
write(2, 0)
displayFiles()
return
end
for fileName, pos in pairs(APP.filePositions) do
if x >= pos.x and x <= pos.x + pos.width and y >= pos.y and y <= pos.y + pos.height then
GPU:clear()
LDX("Loadind content...")
DTX(MONITOR.resolution.width/2 - #X() * 4, MONITOR.resolution.height/2, X(), {255, 255, 255})
is_block_event = true
HDD:read(fileName, function(content)
is_block_event = false
APP.currentFile = fileName
displayFileContent(fileName, content)
return
end)
end
end
end)
APP.filePositions = {}
APP.backButton = nil
write(2, 0) -- lines
APP.scrollPos = 0
APP.maxVisibleLines = 0
APP.fileNames = {}
APP.fileScrollPos = 0
APP.maxVisibleFiles = 0
APP.currentFile = ""
displayFiles()
while true do
SLEEP(0.05)
end
        ]]
    }
}

return filesApp